ada.pred <- prediction(transf.pred1, df.test$credit.rating)
ada.performance <- performance(ada.pred, 'tpr', 'fpr')
plot(ada.performance, colorize=T)
plot.roc.curve(ada.pred)
plot(ada.pred)
ggplot(ada.pred)
ggplot(ada.performance)
plot(ada.performance)
plot(ada.performance, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(predictions, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(ada.performance, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(ada.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
ggroc(ada.performance)
install.packages('ggroc')
install.packages('ggROC')
require(ggROC)
ggroc(ada.performance)
ggroc(ada.pred)
glm.performance <- performance(pred2,'tpr', 'fpr')
glm.pred <- prediction(pred2,df.test$credit.rating)
glm.performance <- performance(glm.pred, 'tpr', 'fpr')
plot(glm.performance, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
glm.pred <- prediction(pred2,df.test$credit.rating)
glm.performance <- performance(glm.pred, 'tpr', 'fpr')
plot(glm.performance, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i", colorize = T)
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, col = "black", lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i", colorize = T)
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
glm.pred <- prediction(pred2,df.test$credit.rating)
glm.performance <- performance(glm.pred, 'tpr', 'fpr')
plot(glm.performance, colorize = T, lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, colorize = T, lty = 1, lwd = 2,
main = title.text, cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, colorize = T, lty = 1, lwd = 2,
main = "ROC Curve", cex.main = 0.6,
cex.lab = 0.8, xaxs="i", yaxs="i")
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, colorize = T, lty = 1, lwd = 2,
main = "ROC Curve")
abline(0,1, col = "red")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(ada.performance, colorize = T)
abline(0,1, col = "black")
auc <- performance(ada.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
abline(0,1, col = "black")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(glm.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
abline(0,1, col = "black")
auc <- performance(glm.pred, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(model)
install.packages(xgboost)
m <- train(formula, data = df.train, method = 'xgbTree')
pred.m <- predict(m,df.test)
confusionMatrix(table(pred.m, df.test$credit.rating), positive = '1')
confusionMatrix(table(pred1, df.test$credit.rating), positive = '1')
?ada
set.seed(123)
model <- ada(formula, data = df.train,loss= 'logistic', type='gentle')
pred1 <- predict(model, df.test)
confusionMatrix(table(pred1, df.test$credit.rating), positive = '1')
model <- ada(formula, data = df.train, type='gentle')
pred1 <- predict(model, df.test)
# Confusion Matrix
confusionMatrix(table(pred1, df.test$credit.rating), positive = '1')
packs <- c('DMwR', 'caret', 'scales', 'randomForest', 'ggplot2', 'dplyr', 'ada', 'forcats', 'ROCR')
lapply(packs, require, character.only = T)
df <- read.csv('credit_dataset.csv', header = T, sep = ',', stringsAsFactors = F)
df["age_categ"] <- cut(df$age, breaks = c(15, 30, 45, 60, 75))
tofactor <- function(dataf, var){
for (variable in var){
dataf[[variable]] <- as.factor(dataf[[variable]])
}
return(dataf)
}
# Creating a function to normalize the numerical variables.
normalizing <- function(dataf, var){
for(variable in var){
dataf[[variable]] <- scale(dataf[[variable]], center = T, scale = T)
}
return(dataf)
}
categ_vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker', 'age_categ')
numeric_vars <- colnames(df[, - match(categ_vars, names(df))])
df <- normalizing(df, numeric_vars)
# Converting to factor
df <- tofactor(df, categ_vars)
table(df$credit.rating)
df %>%
ggplot(aes(x = credit.rating, fill = credit.rating)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
geom_text(aes(y = ((..count..)/sum(..count..)),
label = percent((..count..)/sum(..count..))),
stat = "count", vjust = -0.25) +
theme(plot.title = element_text(face = "bold")) +
labs(title="Checking Imbalance Data ", subtitle="analysing the dependent variable",
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies", x="Credit Rating") +
scale_x_discrete(breaks = c("0", "1"),
labels = c("Bad", "Good")) +
scale_fill_discrete(name = "Rating", labels = c("Bad", "Good")) +
scale_y_continuous(labels = percent)
set.seed(123)
newdf <- SMOTE(credit.rating ~ ., df, perc.over = 100, perc.under = 200)
colnames <- colnames(newdf)
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames, function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
# Feature selection using Random Forest
set.seed(123)
rmodel <- randomForest(credit.rating ~ ., data = newdf, ntree = 150, nodesize = 15, importance = T)
# Feature selection using Learning Vector Quantization (LVQ) model
set.seed(123)
control.lvq <- trainControl(method = 'repeatedcv', number = 10, repeats = 3)
lvq.model <- train(credit.rating ~ ., data = newdf, method='lvq', preProcess="scale", trControl=control.lvq)
# Feature selection using Recursive Feature Elimination or RFE
set.seed(123)
control.rfe <- rfeControl(functions=rfFuncs, method="cv", number=10)
results <- rfe(newdf[,2:22], newdf[,1], sizes=c(1:8), rfeControl=control.rfe)
varImpPlot(rmodel)
varImpPlot(rmodel)
varImp(lvq.model)
varImp(results)
set.seed(123)
idx <- createDataPartition(newdf$credit.rating, p = .8, list = F, times = 1)
df.train <- newdf[idx,]
df.test <- newdf[-idx,]
set.seed(123)
ada.model <- ada(formula, data = df.train, type='gentle')
formula <- as.formula('credit.rating ~ account.balance + credit.duration.months +
previous.credit.payment.status + credit.purpose + credit.amount')
set.seed(123)
ada.model <- ada(formula, data = df.train, type='gentle')
ada.pred <- predict(ada.model, df.test)
ada.pred.t <- as.numeric(as.character(ada.pred))
confusionMatrix(table(ada.pred, df.test$credit.rating), positive = '1')
set.seed(123)
ada.obj <- prediction(ada.pred.t, df.test$credit.rating)
ada.performance <- performance(ada.obj, 'tpr', 'fpr')
plot(ada.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
abline(0,1, col = "black")
auc <- performance(ada.obj, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
set.seed(123)
xgb.model <- train(formula, data = df.train, method = 'xgbTree')
xgb.pred <- predict(m,df.test)
xgb.pred.t <- as.numeric(as.character(xgb.pred))
xgb.pred <- predict(xgb.model,df.test)
xgb.pred.t <- as.numeric(as.character(xgb.pred))
confusionMatrix(table(xgb.pred, df.test$credit.rating), positive = '1')
set.seed(123)
xgb.obj <- prediction(xgb.pred.t,df.test$credit.rating)
xgb.performance <- performance(xgb.obj, 'tpr', 'fpr')
plot(xgb.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
abline(0,1, col = "black")
auc <- performance(xgb.obj, "auc")
auc <- unlist(slot(auc, "y.values"))
auc <- round(auc,2)
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
plot(ada.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
plot(ada.performance, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, colorize = T, lty = 1, lwd = 3,
main = "ROC Curve")
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(ada.performance, color = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, color = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
plot(ada.performance, colors = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, color = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend()
?legend
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.4,0.4, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
legend(0.2,0.7, legend = c(paste0("AUC: ",auc)), cex = 0.6, bty = "n", box.col = "white")
legend(0.2,0.7, legend = c('ada.model'), cex = 0.6, bty = "n", box.col = "white")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ada.model'), cex = 0.6, bty = "n", box.col = "white")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
legend(0.15,0.85, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
legend(0.15,0.9, legend = c('XGB.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n")
legend(0.15,0.9, legend = c('XGB.MODEL'), cex = 0.6, bty = "n")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p")
legend(0.15,0.9, legend = c('XGB.MODEL'), cex = 0.6, bty = "n")
# The Prime Model
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "n", box.col = "blue")
legend(0.15,0.9, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.15,0.95, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.5, bty = "p", box.col = "blue")
legend(0.15,0.95, legend = c('XGB.MODEL'), cex = 0.5, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.15,0.95, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.1,0.95, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.08,0.95, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.05,0.95, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.05,0.5, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
plot(ada.performance, col = 'blue', lty = 1, lwd = 3,
main = "ROC Curve")
plot(xgb.performance, add = T, col = 'red', lty = 1, lwd = 3,
main = "ROC Curve")
legend(0.2,0.7, legend = c('ADA.MODEL'), cex = 0.6, bty = "p", box.col = "blue")
legend(0.05,0.6, legend = c('XGB.MODEL'), cex = 0.6, bty = "p", box.col = "red")
set.seed(123)
control <- trainControl(method = 'repeatedcv', number = 10, repeats = 3)
model <- train(formula, data = df.train, method='xgbTree', trControl = control)
pred <- predict(model, df.test)
confusionMatrix(table(pred, df.test$credit.rating), positive = '1')
varImp(xgb.model)
knitr:: include_graphics("Azure_FeatureSelec.png")
knitr:: include_graphics("Azure_FeatureSelec.png")
knitr:: include_graphics("Azure_FeatureSelec.png")
knitr:: include_graphics("Azure_FeatureSelec.png")
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
chooseCRANmirror(graphics=FALSE, ind=1) # No need to run this part,
# it's a R Markdown correction.
packs <- c('DMwR', 'caret', 'scales', 'randomForest',
'ggplot2', 'dplyr', 'ada', 'forcats', 'ROCR')
lapply(packs, require, character.only = T)
df <- read.csv('credit_dataset.csv', header = T, sep = ',', stringsAsFactors = F)
# Summarizing age column to identify max an min values.
summary(df$age)
# Adding a new categorical feature to the data set.
df["age_categ"] <- cut(df$age, breaks = c(15, 30, 45, 60, 75))
# Creating a function to convert qualitative variables to factors.
tofactor <- function(dataf, var){
for (variable in var){
dataf[[variable]] <- as.factor(dataf[[variable]])
}
return(dataf)
}
# Creating a function to normalize the numerical variables.
normalizing <- function(dataf, var){
for(variable in var){
dataf[[variable]] <- scale(dataf[[variable]], center = T, scale = T)
}
return(dataf)
}
# Splitting columns in categoricals and numericals according to UCI dictionary.
categ_vars <- c('credit.rating', 'account.balance', 'previous.credit.payment.status',
'credit.purpose', 'savings', 'employment.duration', 'installment.rate',
'marital.status', 'guarantor', 'residence.duration', 'current.assets',
'other.credits', 'apartment.type', 'bank.credits', 'occupation',
'dependents', 'telephone', 'foreign.worker', 'age_categ')
numeric_vars <- colnames(df[, - match(categ_vars, names(df))])
# Normalizing.
df <- normalizing(df, numeric_vars)
# Converting to factor.
df <- tofactor(df, categ_vars)
# Numerical Approach
table(df$credit.rating)
# Grapical Approach
df %>%
ggplot(aes(x = credit.rating, fill = credit.rating)) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
geom_text(aes(y = ((..count..)/sum(..count..)),
label = percent((..count..)/sum(..count..))),
stat = "count", vjust = -0.25) +
theme(plot.title = element_text(face = "bold")) +
labs(title="Checking Imbalance Data ", subtitle="analysing the dependent variable",
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies", x="Credit Rating") +
scale_x_discrete(breaks = c("0", "1"),
labels = c("Bad", "Good")) +
scale_fill_discrete(name = "Rating", labels = c("Bad", "Good")) +
scale_y_continuous(labels = percent)
# Resampling the data
set.seed(123) # Setting seed for reproducibility.
newdf <- SMOTE(credit.rating ~ ., df, perc.over = 100, perc.under = 200)
# Checking results.
table(newdf$credit.rating)
# Taking the columns names for futher analysis.
colnames <- colnames(newdf)
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
invisible(lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}}))
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
grid.names <- c('BAD', 'GOOD')
names(grid.names) <- c(0, 1)
lapply(colnames[2:22], function(x){
if(is.factor(newdf[,x])) {
ggplot(newdf, aes_string(x)) +
geom_bar() +
facet_grid(. ~ credit.rating, labeller = labeller(credit.rating = grid.names)) +
labs(title="Credit Risk", subtitle= paste("by column", x),
caption = 'Source: Data collected from German Credit Data Set',
y="Frequencies")}})
sink("/dev/null")
sink("/dev/null")
